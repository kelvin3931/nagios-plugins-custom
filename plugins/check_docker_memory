#!/usr/bin/env python
""" a simple pluings for Docker container status check """

import argparse
import json
import sys

from docker import Client


def get_options():
    parser = argparse.ArgumentParser()
    parser.add_argument('--host', '-H',
                        help='Docker host ip address',
                        dest="DOCKERIP", default="127.0.0.1")
    parser.add_argument('--port', '-p',
                        help='Docker host listen port',
                        dest="DOCKERPORT", type=int, default="2375")
    parser.add_argument('--name', '-n',
                        help='Docker container name',
                        dest="CONTAINERNAME")
    parser.add_argument('--warning', '-w',
                        help='Percent(1-100) use when to warning',
                        dest="WARNING", type=int, default=90)
    parser.add_argument('--critical', '-c',
                        help='Percent(1-100) use when to critical',
                        dest="CRITICAL", type=int, default=95)
    options = parser.parse_args()
    return options


def validate_input(critical, warning):
    if (critical <= 0) or (critical >= 100) or \
       (warning <= 0) or (warning >= 100):
        print "UNKNOWN - invalid input, check nrpe settings"
        sys.exit(3)

    if critical < warning:
        print "UNKNOWN - CRITICAL should not smaller than WARNING"
        sys.exit(3)


def get_stats(client, target):
    stats_obj = client.stats(target)
    memstats = {
        'usage': '',
        'limit': '',
    }

    for obj in stats_obj:
        jobj = json.loads(obj)

        # 1024 * 1024 = 1048576
        memstats['usage'] = str(int(jobj['memory_stats']['usage']) / 1048576)
        memstats['limit'] = str(int(jobj['memory_stats']['limit']) / 1048576)
        break

    return memstats


def get_status(percentage, critical, warning):
    """
    get the status code of the plugin that defined by nagios-plugins
    status code definition could be found at the following url:
    https://nagios-plugins.org/doc/guidelines.html#AEN78
    """

    if percentage > critical:
        return 2
    elif percentage > warning:
        return 1
    else:
        return 0


def container_exist(client, target):
    exist = 0
    containers = client.containers()
    for container in containers:
        for name in container['Names']:
            if target == name.split('/')[1]:
                exist = 1
                break
    return exist


def get_output(critical, warning, dockerip, dockerport, target):
    status = ['OK', 'WARNING', 'CRITICAL', 'UNKNOWN']

    if dockerip == '127.0.0.1' or dockerip == 'localhost':
        base_url = "unix://var/run/docker.sock"
        client = Client()
    else:
        base_url = "tcp://%s:%s" % (dockerip, dockerport)
        client = Client(base_url=base_url)

    if container_exist(client, target) != 1:
        print("CRITICAL - target not found")
        sys.exit(3)

    input_data = get_stats(client, target)

    usage = float(input_data['usage'])
    limit = float(input_data['limit'])

    percentage = 0.0

    # prevent devide by zero
    if usage > 0.0 and limit > 0.0:
        percentage = round((usage / limit) * 100, 2)

    result = get_status(percentage, critical, warning)

    print("%s - %s %% (%s MB) used, Total: %s MB" %
          (status[result], percentage, usage, limit)),

    print(" | TOTAL=%sMB;;;; USED=%sMB;;;; FREE=%sMB;;;;" %
          (limit, usage, (int(limit) - int(usage))))

    return result


def main():
    option = get_options()
    validate_input(option.CRITICAL, option.WARNING)
    exit_code = get_output(option.CRITICAL,
                           option.WARNING,
                           option.DOCKERIP,
                           option.DOCKERPORT,
                           option.CONTAINERNAME)
    sys.exit(exit_code)

if __name__ == '__main__':
    main()
