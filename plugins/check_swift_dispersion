#!/usr/bin/env python
#
# This is the python script to get swift dispersion and save to sqlite file.
#
# you should pust this script under /usr/lib/nagios/plugins/
# and perform it at first time.
#
#   /usr/lib/nagios/plugins/check_swift_dispersion -u
#
# Besides, remember to add this script into cron job to run every hour.
#
# 0 * * * * root /usr/lib/nagios/plugins/check_swift_dispersion -u
#
#
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied.
#
# Auther: TsungYi, Tsai
#

import sys
import json
import logging
import subprocess
import sqlite3 as sqlite
from datetime import datetime
import ast
from sys import argv


def get_logger(name, logfile="/var/log/swift/dispersion.log"):
    # log setting
    LOG = logging.getLogger(name)
    formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    handler = logging.FileHandler(logfile)
    handler.setFormatter(formatter)
    LOG.addHandler(handler)
    LOG.setLevel(logging.DEBUG)
    return LOG

DBFILE = '/var/cache/swift/dispersion.db'

NAGIOS_STATE_OK = 0
NAGIOS_STATE_WARNING = 1


class UpdateReport:

    def __init__(self):
        self.logger = get_logger("update-report")
        self.logger.debug("Update swift dispersion report")

    def get_dispersion_report(self):
        try:
            result = subprocess.check_output(["swift-dispersion-report", "-j"])
            self.logger.info(result)
            return result
        except subprocess.CalledProcessError:
            self.logger.error("swift-dispersion-report running error")
            sys.exit(1)

    def update_record(self, report):
        try:
            r = report.replace('"', "'")
            con = sqlite.connect(DBFILE)
            with con:
                cur = con.cursor()
                cur.execute("CREATE TABLE if not exists Records( \
                    Report TEXT, \
                    Timestamp DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL)")
                cur.execute("INSERT INTO Records(Report) VALUES(\"%s\")" % r)

        except sqlite.Error as e:
            self.logger.error("sql error" % e.args[0])
            sys.exit(1)


class CheckReport:

    def __init__(self):
        self.logger = get_logger("check-report ")
        self.logger.debug("Start checking dispersion from SQLite")

    def get_last_record(self):
        try:
            r = None
            with sqlite.connect(DBFILE) as con:
                c = con.cursor()
                c.execute("SELECT Report from Records \
                          WHERE Timestamp > datetime('now', '-1 days') \
                          ORDER BY Timestamp DESC")
                r = c.fetchone()
            return ast.literal_eval(r[0])
        except sqlite.Error as e:
            self.logger.error("sql error %s" % e.args[0])
            sys.exit(1)

    def nagios_response(self, report):
        """
        Analysis swift dispersion report.
        report should be json format.
        """
        # if there is no valid record, return error
        if report is None:
            errmsg = "all reports are expired"
            self.logger.error(errmsg)
            print errmsg
            sys.exit(NAGIOS_STATE_WARNING)

        # else, analysis the record.
        results = []
        state = NAGIOS_STATE_OK
        for storagetype, values in report.iteritems():
            results.append("%0.2f%% of %s copies found"
                           % (values['pct_found'], storagetype))

            if values['pct_found'] < 100:
                state = NAGIOS_STATE_WARNING

        msg = ", ".join(results)
        self.logger.info(msg)
        print msg
        sys.exit(state)


if __name__ == "__main__":

    if len(argv) > 1:
        updater = UpdateReport()
        report = updater.get_dispersion_report()
        updater.update_record(report)
    else:
        checker = CheckReport()
        report = checker.get_last_record()
        checker.nagios_response(report)
    sys.exit(0)
